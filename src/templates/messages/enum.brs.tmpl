' Auto-generated encoder/decoder for {{TYPE_NAME}}

function {{TYPE_NAME}}Encode(message as Object) as String
    value = 0
    if message <> invalid then
        if GetInterface(message, "ifAssociativeArray") <> invalid then
            existing = message.Lookup("{{FIELD_NAME}}")
            if existing <> invalid then
                value = existing
            end if
        else
            candidate = message.{{FIELD_NAME}}
            if candidate <> invalid then
                value = candidate
            end if
        end if
    end if
    numericValue = {{TYPE_NAME}}_normalizeEnum(value)

    bytes = __pb_createByteArray()
    __pb_writeVarint(bytes, {{TAG}})
    __pb_writeVarint(bytes, numericValue)
    return __pb_toBase64(bytes)
end function

function {{TYPE_NAME}}_normalizeEnum(value as Dynamic) as Integer
    values = {{TYPE_NAME}}_getEnumValues()
    if value = invalid then return 0
    valueType = Type(value)
    if valueType = "String" or valueType = "roString" then
        upper = UCase(value)
        if values.DoesExist(upper) then
            return values[upper]
        end if
        return 0
    end if
    return Int(value)
end function

function {{TYPE_NAME}}_enumName(value as Integer) as Dynamic
    names = {{TYPE_NAME}}_getEnumNames()
    key = StrI(value, 10)
    if names.DoesExist(key) then
        return names[key]
    end if
    return value
end function

function {{TYPE_NAME}}Decode(encoded as String) as Object
    bytes = __pb_fromBase64(encoded)
    cursor = 0
    limit = bytes.Count()
    message = {}
    while cursor < limit
        tagResult = __pb_readVarint(bytes, cursor)
        cursor = tagResult.nextIndex
        fieldNumber = Int(tagResult.value / 8)
        wireType = tagResult.value AND &h07
        if fieldNumber = {{FIELD_ID}} and wireType = {{WIRE_TYPE}} then
            valueResult = __pb_readVarint64(bytes, cursor)
            cursor = valueResult.nextIndex
            numericValue = __pb_toSigned32FromString(valueResult.value)
            message.{{FIELD_NAME}} = {{TYPE_NAME}}_enumName(numericValue)
        else
            exit while
        end if
    end while
    return message
end function

function {{TYPE_NAME}}_getEnumValues() as Object
    globalAA = GetGlobalAA()
    key = "{{TYPE_NAME}}EnumValues"
    if globalAA <> invalid and globalAA.DoesExist(key) then
        return globalAA[key]
    end if
    table = {}
{{ENUM_VALUE_ASSIGNMENTS}}
    if globalAA <> invalid then globalAA[key] = table
    return table
end function

function {{TYPE_NAME}}_getEnumNames() as Object
    globalAA = GetGlobalAA()
    key = "{{TYPE_NAME}}EnumNames"
    if globalAA <> invalid and globalAA.DoesExist(key) then
        return globalAA[key]
    end if
    table = {}
{{ENUM_NAME_ASSIGNMENTS}}
    if globalAA <> invalid then globalAA[key] = table
    return table
end function

